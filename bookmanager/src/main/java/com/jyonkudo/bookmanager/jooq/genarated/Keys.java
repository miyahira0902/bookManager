/*
 * This file is generated by jOOQ.
 */
package com.jyonkudo.bookmanager.jooq.genarated;


import com.jyonkudo.bookmanager.jooq.genarated.tables.Author;
import com.jyonkudo.bookmanager.jooq.genarated.tables.Book;
import com.jyonkudo.bookmanager.jooq.genarated.tables.BookAuthor;
import com.jyonkudo.bookmanager.jooq.genarated.tables.records.AuthorRecord;
import com.jyonkudo.bookmanager.jooq.genarated.tables.records.BookAuthorRecord;
import com.jyonkudo.bookmanager.jooq.genarated.tables.records.BookRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * book_manager.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorRecord> KEY_AUTHOR_PRIMARY = Internal.createUniqueKey(Author.AUTHOR, DSL.name("KEY_author_PRIMARY"), new TableField[] { Author.AUTHOR.ID }, true);
    public static final UniqueKey<BookRecord> KEY_BOOK_PRIMARY = Internal.createUniqueKey(Book.BOOK, DSL.name("KEY_book_PRIMARY"), new TableField[] { Book.BOOK.ID }, true);
    public static final UniqueKey<BookAuthorRecord> KEY_BOOK_AUTHOR_PRIMARY = Internal.createUniqueKey(BookAuthor.BOOK_AUTHOR, DSL.name("KEY_book_author_PRIMARY"), new TableField[] { BookAuthor.BOOK_AUTHOR.BOOK_ID, BookAuthor.BOOK_AUTHOR.AUTHOR_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BookAuthorRecord, BookRecord> BOOK_AUTHOR_IBFK_1 = Internal.createForeignKey(BookAuthor.BOOK_AUTHOR, DSL.name("book_author_ibfk_1"), new TableField[] { BookAuthor.BOOK_AUTHOR.BOOK_ID }, Keys.KEY_BOOK_PRIMARY, new TableField[] { Book.BOOK.ID }, true);
    public static final ForeignKey<BookAuthorRecord, AuthorRecord> BOOK_AUTHOR_IBFK_2 = Internal.createForeignKey(BookAuthor.BOOK_AUTHOR, DSL.name("book_author_ibfk_2"), new TableField[] { BookAuthor.BOOK_AUTHOR.AUTHOR_ID }, Keys.KEY_AUTHOR_PRIMARY, new TableField[] { Author.AUTHOR.ID }, true);
}
